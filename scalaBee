#/bin/bash
## Arguments: numerOfTests program arg1Init-arg1Final arg2Init-arg2Final arg3Init-arg3Final...
## Ex: ./scalaBee 2 ./examples/omp_pi 2,4,8 100000,1000000,10000000,100000000

## Setting up
export LC_NUMERIC="en_US.UTF-8"

## Showing initial message
printf "=================\nStarting ScalaBee\n=================\n\n"

## Getting Parameters
numberOfTests=$1
program=$2
param1=$3
param2=$4
problemSize=($(echo $param2 | tr "," " "))
threads=($(echo $param1 | tr "," " "))
printf "Program:\t\t$program\n"
printf "Number of Tests:\t$numberOfTests\n"
printf "Number of threads:\t${threads[*]}"
printf "\nProblem Size:\t\t${problemSize[*]}"


## Running program and measuring time
printf "\n \nStarting tests...\n"
numberOfProblemSizes=${#problemSize[@]}
numberOfThreads=${#threads[@]}
declare -a averageRuntime
for (( i=0; i<$numberOfProblemSizes; i++ ));
do
	for (( j=0; j<$numberOfThreads; j++ ));
	do
		start=$(($(date +%s%N)))
		for (( k=1; k<=$numberOfTests; k++ ))
		do
			$program $((threads[j])) $((problemSize[i]))
		done
		end=$(($(date +%s%N)))

		runtime=$((end-start)) 
		printf "The total elapsed time is %.3fs\n" $(bc -q <<< scale=3\;$runtime/1000000000)
		averageRuntime[i*numberOfThreads+j]=$(bc -q <<< scale=3\;$runtime/1000000000/$numberOfTests)
		printf "Average elapsed time is %.3fs\n" ${averageRuntime[i*numberOfThreads+j]}
		printf "\n\n"
	done
done

## Print Tables
printf "==============="
for (( j=0; j<$numberOfThreads; j++ ));
do
    printf "=========="
done
printf "==========\n"


printf " %-12s %1s" "" "|"
for (( j=0; j<$((numberOfThreads*5)); j++ ));
do
    printf " "
done
printf "Threads\n"

printf " %-12s %1s" "" "|" 
for (( j=0; j<$numberOfThreads; j++ ));
do
    printf "%10s" ${threads[j]}
done
printf "\n"

printf "==============="
for (( j=0; j<$numberOfThreads; j++ ));
do
    printf "=========="
done
printf "==========\n"


printf " %-12s %1s\n" "PROBLEM SIZE" "|"

printf "==============="
for (( j=0; j<$numberOfThreads; j++ ));
do
    printf "=========="
done
printf "==========\n"


for (( i=0; i<$numberOfProblemSizes; i++ ));
do
	printf " %-12s %01s " "$((problemSize[i]))" "|"
	for (( j=0; j<$numberOfThreads; j++ ));
	do
    	printf "%10.3f"  "${averageRuntime[i*numberOfThreads+j]}"
    done
    printf "\n"
done
