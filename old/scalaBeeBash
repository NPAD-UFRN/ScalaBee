#/bin/bash
## Arguments: numerOfTests program arg1Init-arg1Final arg2Init-arg2Final arg3Init-arg3Final...
## Ex: ./scalaBee 2 ./examples/omp_pi 1,2,4,8 100000,1000000,10000000,100000000

## Function for creating output file
function createOutputFile {
	fileName=$1
	declare -a tableData=("${!2}")
	if [ -e $fileName ]
	then
	  rm $fileName
	fi
	touch $fileName
	for (( i=0; i<$numberOfProblemSizes; i++ ));
	do
		printf  "%s," "$((problemSize[i]))"  >> $fileName
		for (( j=0; j<$numberOfThreads; j++ ));
		do
	   		printf "%.3f,"  "${tableData[i*numberOfThreads+j]}" >> $fileName
	   	done
	   	printf "\n" >> $fileName
	done
}

## Function for printing table bar
function printBar {
	printf "========================="
	for (( j=0; j<$numberOfThreads; j++ ));
	do
	    printf "=========="
	done
	printf "\n"
}

## Function for printing table
function printTable {
	declare -a tableData=("${!1}")

	printBar

	printf " %-12s %1s" "PROBLEM SIZE" "|"
	for (( j=0; j<$((numberOfThreads*5)); j++ ));
	do
	    printf " "
	done
	printf "Threads\n"

	printf " %-12s %1s" "" "|" 
	for (( j=0; j<$numberOfThreads; j++ ));
	do
	    printf "%10s" ${threads[j]}
	done
	printf "\n"

	printBar

	for (( i=0; i<$numberOfProblemSizes; i++ ));
	do
		printf " %-12s %01s " "$((problemSize[i]))" "|"
		for (( j=0; j<$numberOfThreads; j++ ));
		do
    		printf "%10.3fs"  "${tableData[i*numberOfThreads+j]}"
    	done
    	printf "\n"
	done
	printBar
}

## Setting up
export LC_NUMERIC="en_US.UTF-8"

## Showing initial message
printf "=================\nStarting ScalaBee\n=================\n\n"

## Getting Parameters
numberOfTests=$1
program=$2
param1=$3
param2=$4
problemSize=($(echo $param2 | tr "," " "))
threads=($(echo $param1 | tr "," " "))
printf "Program:\t\t$program\n"
printf "Number of Tests:\t$numberOfTests\n"
printf "Number of threads:\t${threads[*]}"
printf "\nProblem Size:\t\t${problemSize[*]}"


## Running program and measuring time
printf "\n \nStarting tests...\n"
numberOfProblemSizes=${#problemSize[@]}
numberOfThreads=${#threads[@]}
declare -a averageRuntime
for (( i=0; i<$numberOfProblemSizes; i++ ));
do
	for (( j=0; j<$numberOfThreads; j++ ));
	do
		start=$(($(date +%s%N)))
		for (( k=1; k<=$numberOfTests; k++ ))
		do
			$program $((threads[j])) $((problemSize[i]))
		done
		end=$(($(date +%s%N)))
		runtime=$((end-start)) 
		printf "The total elapsed time is %.3fs\n" $(bc -q <<< scale=3\;$runtime/1000000000)
		averageRuntime[i*numberOfThreads+j]=$(bc -q <<< scale=3\;$runtime/1000000000/$numberOfTests)
		printf "Average elapsed time is %.3fs\n" ${averageRuntime[i*numberOfThreads+j]}
		printf "\n\n"
	done
done


## Calculate Scalability and Efficiency
declare -a scalab
declare -a eff
for (( i=0; i<$numberOfProblemSizes; i++ ));
do
	for (( j=0; j<$numberOfThreads; j++ ));
	do
    	scalab[i*numberOfThreads+j]=$(bc -q <<< scale=3\;${averageRuntime[i*numberOfThreads]}/${averageRuntime[i*numberOfThreads+j]})
    	eff[i*numberOfThreads+j]=$(bc -q <<< scale=3\;${scalab[i*numberOfThreads+j]}/$((threads[j])))
    done
done

## Write output files
createOutputFile $(pwd)/output/runtime.dat averageRuntime[@]
createOutputFile $(pwd)/output/scalability.dat scalab[@]
createOutputFile $(pwd)/output/efficiency.dat eff[@]


## Print Time Table
printf "AVERAGE RUNTIME IN SECONDS\n"
printTable averageRuntime[@]

## Print Scalability Table
printf "\n\nSCALABILITY TABLE\n"
printTable scalab[@]


## Print Efficiency Table
printf "\n\nEFFICIENCY TABLE\n"
printTable eff[@]


## Plotting data
gnuplot -persist <<-EOFMarker
	set grid
	set title 'Scalability Plot'
	set xlabel 'Number of threads'
	set ylabel 'Scalability'

	set style data linespoints
	plot 'immigration.dat' using 2:xtic(1) title columnheader(1), for [i=3:4] '' using i title columnheader(i)
EOFMarker

##plot 'output/eff.dat' u 1:2 w lp t '10000', 'output/eff.dat' u 1:3 w lp t '100000', 'output/eff.dat' u 1:4 w lp t '1000000'
## Falta Mudar o tipo de plot para minha tabela